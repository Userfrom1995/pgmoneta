name: CI

on:
  push:
    branches:
      - main
      - 0.19.x
      - fix_test
  pull_request:
    branches:
      - main
      - 0.19.x
      - fix_test
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        compiler: [clang]
        build_type: [Debug]
        run_id: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt install -y \
          git gcc clang clang-tools cmake make \
          libev4 libev-dev libssl-dev libsystemd-dev \
          zlib1g zlib1g-dev libzstd-dev liblz4-dev \
          libssh-dev libatomic1 \
          python3-docutils libbz2-dev libarchive-dev \
          bzip2 net-tools check libyaml-dev llvm

      - name: Install PostgreSQL
        run: |
          sudo apt install curl ca-certificates
          sudo install -d /usr/share/postgresql-common/pgdg
          sudo curl -o /usr/share/postgresql-common/pgdg/apt.postgresql.org.asc --fail https://www.postgresql.org/media/keys/ACCC4CF8.asc
          sudo sh -c 'echo "deb [signed-by=/usr/share/postgresql-common/pgdg/apt.postgresql.org.asc] https://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt update
          sudo apt install -y postgresql-17

      - name: Set Env Path Variable
        run: |
          echo "PATH=$PATH:/usr/lib/postgresql/17/bin" >> $GITHUB_ENV
          echo $PATH

      - name: Build Project
        run: |
          mkdir build
          cd build
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            export CC=/usr/bin/gcc
          else
            export CC=/usr/bin/clang
          fi
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DDOCS=FALSE ..
          make -j$(nproc)
        working-directory: /home/runner/work/pgmoneta/pgmoneta/

      - name: Run Tests
        run: |
          if [ "${{ matrix.compiler }}" = "clang" ] && [ "${{ matrix.build_type }}" = "Debug" ]; then
            $(which bash) ./test/check.sh ci
          fi
        working-directory: /home/runner/work/pgmoneta/pgmoneta/

      - name: Upload All Coverage Reports as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.run_id }}-${{ github.run_id }}
          path: /tmp/pgmoneta-test/coverage
          retention-days: 90

      - name: Upload Run Log as Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.compiler }}-${{ matrix.build_type }}-${{ matrix.run_id }}-${{ github.run_id }}
          path: /tmp/pgmoneta-test/log
          retention-days: 90

  build-macos:
    runs-on: macos-latest
    env:
      PGMONETA_ROOT: ${{ github.workspace }}
      BUILD_DIR: ${{ github.workspace }}/build
      POSTGRESQL_VERSION: "@17"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Install dependencies
        run: |
          brew update
          brew install \
            libev \
            libyaml \
            docutils \
            libarchive \
            check \
            postgresql${POSTGRESQL_VERSION} \
            libssh
      - name: Add PostgreSQL to PATH
        run: |
          echo "$(brew --prefix postgresql${POSTGRESQL_VERSION})/bin" >> $GITHUB_PATH
      - name: Build with Clang
        run: |
          mkdir -p $BUILD_DIR
          cd $BUILD_DIR
          export CC=$(xcrun -find clang)
          cmake -DCMAKE_BUILD_TYPE=Debug -DDOCS=FALSE ..
          make -j$(sysctl -n hw.ncpu)

      - name: Show logs on failure
        if: failure()
        working-directory: ${{ env.BUILD_DIR }}
        run: |
          cat ./log/logfile || echo "logfile not found"
          cat ./log/pgmoneta.log || echo "pgmoneta.log not found"

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-logs-${{ github.run_id }}
          path: |
            ${{ env.BUILD_DIR }}/log/
            /tmp/*.log
          retention-days: 7

      - name: Upload Generated Documentation Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-generated-docs-${{ github.run_id }}
          path: ${{ env.BUILD_DIR }}/doc/
          retention-days: 7

#  build-freebsd:
#    runs-on: ubuntu-latest
#    name: FreeBSD Build and Test
#    timeout-minutes: 30
#    strategy:
#      matrix:
#        compiler: [clang]
#        build_type: [Debug, Release]
#      fail-fast: false
#
#    steps:
#      - uses: actions/checkout@v4
#      - name: Install QEMU dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y \
#            qemu-system-x86 \
#            qemu-utils \
#            libvirt-daemon-system \
#            libvirt-clients \
#            bridge-utils
#          sudo systemctl start libvirtd
#
#      - name: Setup FreeBSD VM
#        uses: vmactions/freebsd-vm@v1
#        id: freebsd-vm
#        with:
#          release: "14.2"
#          usesh: true
#          envs: "PATH,GITHUB_ENV,GITHUB_WORKSPACE,RUNNER_USER"
#          mem: 6144
#          sync: rsync
#          copyback: true
#          prepare: |
#            # System bootstrap
#            ASSUME_ALWAYS_YES=yes pkg bootstrap
#            pkg update
#            pkg upgrade -y
#
#            # Base dependencies
#            pkg install -y \
#              bash \
#              sudo \
#              libev \
#              cmake \
#              llvm11 \
#              postgresql17-server \
#              postgresql17-contrib \
#              zstd \
#              liblz4 \
#              bzip2 \
#              libssh \
#              libyaml \
#              libarchive \
#              check \
#              py311-docutils
#
#      - name: Build Project
#        shell: freebsd {0}
#        run: |
#          mkdir -p $GITHUB_WORKSPACE/build
#          cd $GITHUB_WORKSPACE/build
#          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DDOCS=FALSE "$GITHUB_WORKSPACE"
#          make -j$(sysctl -n hw.ncpu)
#
#      - name: Debug Testsuite Path
#        shell: freebsd {0}
#        run: |
#          cd "${GITHUB_WORKSPACE}/build"
#          bash ./testsuite.sh
#
#      - name: Clean Testsuite
#        shell: freebsd {0}
#        run: |
#          cd ${GITHUB_WORKSPACE}/build
#          bash ./testsuite.sh clean
#
#      - name: Upload Build Artifacts
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: freebsd-${{ matrix.compiler }}-${{ matrix.build_type }}-logs
#          path: |
#            $GITHUB_WORKSPACE/build/log/*
#            /tmp/*.log
#          retention-days: 7
#
#      - name: Upload Generated Documentation Artifacts
#        if: matrix.build_type == 'Release'
#        uses: actions/upload-artifact@v4
#        with:
#          name: freebsd-generated-docs
#          path: $GITHUB_WORKSPACE/build/doc/*
#          retention-days: 7

